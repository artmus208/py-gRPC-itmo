from concurrent import futures
import grpc
from protobufs import glossary_pb2
from protobufs import  glossary_pb2_grpc


class GloassaryController():
    
    def __init__(self):
        self.terms = {
    "Производительность (Performance)": "Характеристика системы, отражающая её способность выполнять задачи за определённое время.",
    "Бенчмаркинг (Benchmarking)": "Процесс измерения производительности системы с использованием определённых тестов.",
    "Веб-приложение (Web Application)": "Программное обеспечение, работающее на веб-сервере и доступное через веб-браузер.",
    "Отклик (Response)": "Время, которое требуется системе для ответа на запрос пользователя.",
    "Задержка (Latency)": "Время между отправкой запроса и получением первого байта ответа.",
    "Пропускная способность (Throughput)": "Количество операций или запросов, которые система может обработать за определённое время.",
    "Нагрузка (Load)": "Объём запросов или пользователей, работающих с системой одновременно.",
    "Тестирование нагрузки (Load Testing)": "Метод тестирования, который оценивает производительность системы при определённой нагрузке.",
    "Стресс-тестирование (Stress Testing)": "Процесс проверки системы при экстремальных нагрузках, превышающих её ожидаемые возможности.",
    "Генератор нагрузки (Load Generator)": "Инструмент, который создает запросы для проверки производительности системы.",
    "Балансировщик нагрузки (Load Balancer)": "Компонент, распределяющий трафик между несколькими серверами для оптимизации работы системы.",
    "Кэширование (Caching)": "Механизм хранения данных в быстрой памяти для ускорения доступа к ним.",
    "Скалируемость (Scalability)": "Способность системы увеличивать свою производительность при росте нагрузки.",
    "Ресурсоёмкость (Resource Usage)": "Количество вычислительных ресурсов (CPU, память, сеть), используемых системой.",
    "Время выполнения (Execution Time)": "Общее время, необходимое для выполнения определённой задачи.",
    "Отказоустойчивость (Fault Tolerance)": "Способность системы продолжать работать в случае отказа некоторых её компонентов.",
    "Базовое тестирование (Baseline Testing)": "Начальное тестирование для определения базового уровня производительности системы.",
    "Пиковая нагрузка (Peak Load)": "Максимальная нагрузка, которую может выдержать система без деградации производительности.",
    "Среднее время отклика (Average Response Time)": "Средний показатель времени, необходимого для ответа системы на запрос.",
    "Максимальное время отклика (Max Response Time)": "Самое большое время отклика системы на запрос из тестового набора.",
    "Инструмент бенчмаркинга (Benchmarking Tool)": "Программное обеспечение для измерения производительности системы.",
    "Серверная нагрузка (Server Load)": "Объём работы, выполняемой сервером в данный момент.",
    "Скорость передачи данных (Data Transfer Rate)": "Количество данных, передаваемых за единицу времени.",
    "Виртуальный пользователь (Virtual User)": "Эмуляция реального пользователя в процессе тестирования нагрузки.",
    "Модель нагрузки (Load Model)": "Представление того, как будет распределяться нагрузка в ходе тестирования.",
    "Фиктивный тест (Mock Test)": "Тест, имитирующий реальные операции без выполнения настоящих вычислений.",
    "Сценарий тестирования (Test Scenario)": "Последовательность операций, выполняемых во время тестирования.",
    "Анализ производительности (Performance Analysis)": "Оценка результатов тестирования для выявления узких мест системы.",
    "Сеть доставки контента (CDN)": "Система распределённых серверов, ускоряющая доставку контента пользователям.",
    "Временной интервал (Time Interval)": "Период времени, используемый для измерения производительности.",
    "Клиент-серверная архитектура (Client-Server Architecture)": "Модель взаимодействия между клиентом и сервером.",
    "Обработка запроса (Request Processing)": "Процесс обработки входящего запроса сервером.",
    "Масштабируемое приложение (Scalable Application)": "Программное обеспечение, способное эффективно работать при увеличении нагрузки.",
    "База данных (Database)": "Система хранения данных, используемая приложением.",
    "Нагрузка по времени (Time-based Load)": "Тип нагрузки, изменяющийся в зависимости от времени.",
    "Средства мониторинга (Monitoring Tools)": "Инструменты для отслеживания производительности и состояния системы.",
    "Облачное тестирование (Cloud Testing)": "Процесс тестирования, выполняемый в облачной среде.",
    "Серверная оптимизация (Server Optimization)": "Процесс улучшения работы серверов для повышения производительности.",
    "Многопоточность (Multithreading)": "Возможность выполнения нескольких потоков одновременно.",
    "Одновременные пользователи (Concurrent Users)": "Количество пользователей, одновременно работающих с системой.",
    "Сетевой трафик (Network Traffic)": "Объём данных, передаваемых через сеть.",
    "Обработка ошибок (Error Handling)": "Процесс управления ошибками и сбоями в системе.",
    "Среда тестирования (Testing Environment)": "Конфигурация аппаратного и программного обеспечения, используемая для тестирования.",
    "Критическая нагрузка (Critical Load)": "Максимальная нагрузка, при которой система всё ещё работает стабильно.",
    "Горячая точка (Hotspot)": "Часть системы, которая оказывает наибольшее влияние на производительность.",
    "Быстродействие (Speed)": "Скорость, с которой система выполняет задачи.",
    "Оптимизация кода (Code Optimization)": "Процесс улучшения кода для повышения его производительности.",
    "Шкала тестирования (Testing Scale)": "Размер и охват тестирования, проводимого на системе.",
    "Асинхронность (Asynchrony)": "Возможность выполнения задач без ожидания завершения других операций.",
    "Очередь задач (Task Queue)": "Механизм управления задачами в системе.",
    "Тестирование стабильности (Stability Testing)": "Оценка работы системы при длительных нагрузках.",
    "Метрические данные (Metrics)": "Показатели, используемые для оценки производительности.",
    "Система управления очередями (Queue Management System)": "Программное обеспечение для управления очередями задач.",
    "Масштабирование (Scaling)": "Процесс увеличения или уменьшения ресурсов для адаптации к изменению нагрузки.",
    "Реальное время (Real-time)": "Операции, выполняемые в момент их возникновения.",
    "Конкуренция за ресурсы (Resource Contention)": "Ситуация, когда несколько процессов одновременно требуют одних и тех же ресурсов.",
    "Параллельная обработка (Parallel Processing)": "Одновременное выполнение нескольких задач.",
    "Снижение производительности (Performance Degradation)": "Ухудшение показателей работы системы.",
    "Бэкэнд (Backend)": "Серверная часть веб-приложения.",
    "Фронтэнд (Frontend)": "Клиентская часть веб-приложения.",
    "Эффективность (Efficiency)": "Отношение результатов работы системы к затратам ресурсов.",
    "Непрерывное тестирование (Continuous Testing)": "Процесс тестирования, выполняемый на протяжении всего цикла разработки.",
    "Графическая визуализация (Graph Visualization)": "Представление результатов тестирования в виде графиков.",
    "Интеграционное тестирование (Integration Testing)": "Проверка взаимодействия между компонентами системы.",
    "Программное обеспечение (Software)": "Компьютерные программы и приложения, работающие на устройствах.",
    "Сетевые задержки (Network Latency)": "Время задержки при передаче данных через сеть.",
    "Динамическая нагрузка (Dynamic Load)": "Изменение нагрузки в реальном времени.",
    "Обработка ошибок (Error Processing)": "Управление возникшими ошибками во время выполнения задач.",
    "Производственный сервер (Production Server)": "Сервер, обслуживающий реальных пользователей.",
    "Тестовая среда (Test Environment)": "Среда, предназначенная для тестирования приложений.",
    "Транзакция (Transaction)": "Завершённая последовательность операций.",
    "Цикл обработки (Processing Cycle)": "Полный цикл выполнения запроса от его получения до ответа.",
    "Реальное использование (Real-world Usage)": "Использование системы в условиях, близких к реальным.",
    "Обратная связь (Feedback)": "Информация о результатах работы системы.",
    "Разработка ПО (Software Development)": "Процесс создания программного обеспечения.",
    "Ключевые показатели эффективности (KPIs)": "Основные метрики для оценки работы системы.",
    "Время простоя (Downtime)": "Период, когда система недоступна для пользователей.",
    "Данные логирования (Logging Data)": "Информация, записываемая системой во время работы.",
    "Масштабирование вверх (Vertical Scaling)": "Увеличение ресурсов существующих серверов.",
    "Масштабирование вширь (Horizontal Scaling)": "Добавление новых серверов для обработки нагрузки.",
    "Быстрая диагностика (Quick Diagnostics)": "Быстрое выявление причин проблем в системе.",
    "Автоматизация тестирования (Test Automation)": "Процесс автоматизации выполнения тестов.",
    "Репликация (Replication)": "Создание копий данных или компонентов системы.",
    "Аутентификация (Authentication)": "Процесс проверки подлинности пользователя.",
    "Авторизация (Authorization)": "Процесс проверки прав доступа пользователя.",
    "Обработка событий (Event Processing)": "Управление событиями в приложении.",
    "Внешние зависимости (External Dependencies)": "Сторонние компоненты, используемые системой.",
    "Гармоничное тестирование (Smoke Testing)": "Начальное тестирование системы для проверки её базовой функциональности.",
    "Нагрузка пользователей (User Load)": "Количество пользователей, одновременно использующих систему.",
    "Среднее время обработки (Average Processing Time)": "Среднее время выполнения задач системой.",
    "Поток данных (Data Flow)": "Последовательность передачи данных в системе.",
    "Узкое место (Bottleneck)": "Часть системы, ограничивающая её производительность."
}
    
    def GetAllTerms(self, request, context):
        return glossary_pb2.TermList(terms=[
            glossary_pb2.Term(name=name, description=desc)
            for name, desc in self.terms.items()
        ])

    def AddTerm(self, request, context):
        if request.name in self.terms:
            return glossary_pb2.OperationStatus(success=False, message="Term already exists")
        self.terms[request.name] = request.description
        return glossary_pb2.OperationStatus(success=True, message="Term added successfully")

    def UpdateTerm(self, request, context):
        if request.name not in self.terms:
            return glossary_pb2.OperationStatus(success=False, message="Term not found")
        self.terms[request.name] = request.description
        return glossary_pb2.OperationStatus(success=True, message="Term updated successfully")

    def DeleteTerm(self, request, context):
        if request.name not in self.terms:
            return glossary_pb2.OperationStatus(success=False, message="Term not found")
        del self.terms[request.name]
        return glossary_pb2.OperationStatus(success=True, message="Term deleted successfully")


def serve():
    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))
    glossary_pb2_grpc.add_GlossaryControllerServicer_to_server(GloassaryController(), server)
    server.add_insecure_port('[::]:50051')
    server.start()
    print("Server is running on port 50051")
    server.wait_for_termination()
    
if __name__ == "__main__":
    try:
        serve()
    except KeyboardInterrupt:
        print("Ctrl-C\nServer gone")
    